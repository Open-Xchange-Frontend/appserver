#!/usr/bin/env node

const url = require('url')
const path = require('path')
const nopt = require('nopt')
const server = require('../lib/appserver')

nopt.invalidHandler = function (key, val) {
  const messages = {
    port: 'Invalid port number: ',
    server: 'Invalid server URL: ',
    zoneinfo: 'Invalid tzdata path: '
  }
  console.error((messages[key] || 'Invalid option: ' + key + '=') + val)
  usage(1)
}

const options = nopt({
  help: Boolean,
  manifests: [String, Array],
  path: String,
  port: Number,
  server: String,
  verbose: ['local', 'remote', 'proxy', 'all', Array],
  zoneinfo: path
}, {
  h: '--help',
  m: '--manifests',
  p: '--port',
  s: '--server',
  v: '--verbose',
  z: '--zoneinfo'
}, process.argv, 2)

if (options.help) usage(0)

function usage (exitCode) {
  (exitCode ? console.error : console.log)(
    'Usage: appserver [OPTION]... [PATH]...\n\n' +
        '  -h,      --help           print this help message and exit\n' +
        '  -m PATH, --manifests=PATH add manifests from the specified path (default:\n' +
        '                            the "manifests" subdirectory of every file path)\n' +
        '           --path=PATH      absolute path of the UI (default: /appsuite)\n' +
        '  -p PORT, --port=PORT      listen on PORT (default: 8337)\n' +
        '  -s URL,  --server=URL     use an existing server as fallback\n' +
        '  -v TYPE, --verbose=TYPE   print more information depending on TYPE:\n' +
        '                            local: local files, remote: remote files,\n' +
        '                            proxy: forwarded URLs, all: shortcut for all three\n' +
        '  -z PATH, --zoneinfo=PATH  use timezone data from the specified path\n' +
        '                            (default: /usr/share/zoneinfo/)\n\n' +
        'Files are searched in each PATH in order and requested from the server if not\n' +
        'found. If no paths are specified, the default is /var/www/appsuite/.')
  process.exit(exitCode)
}

options.prefixes = options.argv.remain.map(path.resolve)
options.manifests = options.manifests || options.prefixes.map(prefix => path.join(prefix, 'manifests/')).reverse()

if (options.server) {
  // eslint-disable-next-line
  const serverUrl = url.parse(options.server)
  if (!/^https?:/.test(serverUrl.protocol)) {
    console.error('Server must be an HTTP(S) URL')
    usage(1)
  }
}

server.create(options)
